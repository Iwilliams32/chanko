{"name":"Chanko","tagline":"Extend rails application","body":"# Chanko\r\nChanko provides a simple framework for rapidly and safely prototyping new\r\nfeatures in your production Rails app, and exposing these prototypes to\r\nspecified segments of your user base.\r\n\r\nWith Chanko, you can release many concurrent features and independently manage\r\nwhich users see them. If there are errors with any chanko, it will be\r\nautomatically removed, without impacting your site.\r\n\r\n## Usage\r\nAdd to your Gemfile.\r\n\r\n```ruby\r\ngem \"chanko\"\r\n```\r\n\r\n## Files\r\nChanko provides a generator to create templates of an unit.\r\n\r\n```\r\n$ rails generate chanko:unit example_unit\r\n      create  app/units/example_unit\r\n      create  app/units/example_unit/example_unit.rb\r\n      create  app/units/example_unit/views/.gitkeep\r\n      create  app/units/example_unit/images/.gitkeep\r\n      create  app/units/example_unit/javascripts/.gitkeep\r\n      create  app/units/example_unit/stylesheets/.gitkeep\r\n      create  app/assets/images/units/example_unit\r\n      create  app/assets/javascripts/units/example_unit\r\n      create  app/assets/stylesheets/units/example_unit\r\n```\r\n\r\n## Invoke\r\nYou can invoke the logics defined in your units via `invoke` and `unit` methods.\r\nIn controller class context, `unit_action` utility is also provided.\r\nThe block passed to `invoke` is a fallback executed if any problem occurs in invoking.\r\n\r\n```ruby\r\n# app/controllers/users_controller.rb\r\nclass UsersController < ApplicationController\r\n  unit_action :example_unit, :show\r\n\r\n  def index\r\n    invoke(:example_unit, :index) do\r\n      @users = User.all\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n```\r\n-# app/views/examples/index.html.slim\r\n= unit.helper_method\r\n= invoke(:example_unit, :render_example)\r\n```\r\n\r\n```\r\n-# app/units/example_unit/views/_example.html.slim\r\n= foo\r\n```\r\n\r\n## Unit\r\n\r\n### module\r\nYou can define your MVC code here.\r\n\r\n```ruby\r\n# app/units/example_unit/example_unit.rb\r\nmodule ExampleUnit\r\n  include Chanko::Unit\r\n  ...\r\nend\r\n```\r\n\r\n### active_if\r\nThis block is used to decide if this unit is active or not.\r\n`context` is the receiver object of `invoke`.\r\n`options` is passed via `invoke(:foo, :bar, :active_if_options => { ... })`.\r\nBy default, this is set as `active_if { true }`.\r\n\r\n```ruby\r\nactive_if do |context, options|\r\n  true\r\nend\r\n```\r\n\r\n### raise_error\r\nBy default, any error raised in production env is ignored.\r\n`raise_error` is used to force an unit to raise up errors occured in invoking.\r\nYou can force all units to raise up errors by `Config.raise_error = true`.\r\n\r\n```ruby\r\nraise_error\r\n```\r\n\r\n### function\r\nIn controller or view context, you can call functions defined by `function`\r\nvia `invoke(:example_unit, :function_name)`.\r\n\r\n```ruby\r\nscope(:controller) do\r\n  function(:show) do\r\n    @user = User.find(params[:id])\r\n  end\r\n\r\n  function(:index) do\r\n    @users = User.active\r\n  end\r\nend\r\n```\r\n\r\n### render\r\nThe view path app/units/example_unit/views is added into view_paths in invoking.\r\nSo you can render app/units/example_unit/views/_example.html.slim in invoking.\r\n\r\n```ruby\r\nscope(:view) do\r\n  function(:render_example) do\r\n    render \"/example\", :foo => hello(\"world\")\r\n  end\r\nend\r\n```\r\n\r\n### models\r\nIn models block, you can expand model features by `expand` method.\r\nThe expanded methods are available via unit proxy like `User.unit.active`,\r\nand `User.find(params[:id]).unit.active?`, and so on.\r\n\r\n```ruby\r\nmodels do\r\n  expand(:User) do\r\n    scope :active, lambda { where(:deleted_at => nil) }\r\n\r\n    def active?\r\n      deleted_at.nil?\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### shared\r\nYou can call methods defined by `shared` in invoking.\r\n\r\n```ruby\r\nshared(:hello) do |world|\r\n  \"Hello, #{world}\"\r\nend\r\n```\r\n\r\n### helpers\r\nYou can call helpers in view via unit proxy like `unit.helper_method`.\r\n\r\n```ruby\r\nhelpers do\r\n  def helper_method\r\n    \"helper method\"\r\n  end\r\nend\r\n```\r\n\r\n\r\n## Example\r\nhttps://github.com/cookpad/chanko/tree/master/spec/dummy  \r\nChanko provides an example rails application in spec/dummy directory.\r\n\r\n```\r\n$ git clone git@github.com:cookpad/chanko.git\r\n$ cd chanko/spec/dummy\r\n$ bundle install\r\n$ bundle exec rake db:create db:migrate\r\n$ rails s\r\n$ open http://localhost:3000\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}